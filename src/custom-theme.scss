@use '@angular/material' as mat;
// No need for @use "sass:color"; if not using advanced color functions here

// --- Core Material setup ---
@include mat.core(); // This should be here and only once in the project

// --- Light Theme Palettes ---
$my-pwa-app-primary-light: mat.define-palette(mat.$indigo-palette);
$my-pwa-app-accent-light: mat.define-palette(mat.$pink-palette, A200, A100, A400);
$my-pwa-app-warn: mat.define-palette(mat.$red-palette);

// --- Light Theme Definition ---
$my-pwa-app-light-theme: mat.define-light-theme((
  color: (
    primary: $my-pwa-app-primary-light,
    accent: $my-pwa-app-accent-light,
    warn: $my-pwa-app-warn,
  ),
  typography: mat.define-typography-config(), // Consider customizing typography here
  density: 0
));

// --- Dark Theme Palettes ---
$my-pwa-app-primary-dark: mat.define-palette(mat.$deep-purple-palette);
$my-pwa-app-accent-dark: mat.define-palette(mat.$amber-palette);

// --- Dark Theme Definition ---
$my-pwa-app-dark-theme: mat.define-dark-theme((
  color: (
    primary: $my-pwa-app-primary-dark,
    accent: $my-pwa-app-accent-dark,
    warn: $my-pwa-app-warn,
  ),
  typography: mat.define-typography-config(), // Ensure consistency or customize for dark
  density: 0
));

// --- Apply Light Theme globally by default ---
@include mat.all-component-themes($my-pwa-app-light-theme);

// --- CSS Custom Properties for general theming ---
:root {
  // Font variables are good here
  --font-family-base: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
  --font-family-ar: 'Tajawal', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
  --font-family-en: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;

  // Color variables
  --app-background-color: #{mat.get-color-from-palette(mat.$gray-palette, 50)};
  --app-text-color: #{mat.get-color-from-palette(mat.$gray-palette, 900)};
  --app-surface-color: white;
  --app-border-color: #{mat.get-color-from-palette(mat.$gray-palette, 300)};
  --app-hover-background-color: #{mat.get-color-from-palette(mat.$gray-palette, 100)};
  --app-secondary-text-color: #{mat.get-color-from-palette(mat.$gray-palette, 600)};
  --app-icon-color-subtle: #{mat.get-color-from-palette(mat.$gray-palette, 500)};
  --app-disabled-color: #{mat.get-color-from-palette(mat.$gray-palette, 400)};

  // CSS variables for custom elevation (if you choose to implement it this way for non-Material elements)
  // These opacities are typically what Material uses.
  --app-elevation-umbra-opacity: 0.2;
  --app-elevation-penumbra-opacity: 0.14;
  --app-elevation-ambient-opacity: 0.12;
}

// --- Apply Dark Theme specifics ---
body.dark-theme {
  // Apply Material Dark Theme colors to all Material components
  @include mat.all-component-colors($my-pwa-app-dark-theme);

  // Update CSS Custom Properties for Dark Theme
  --app-background-color: #{mat.get-color-from-palette(mat.$gray-palette, 900)};
  --app-text-color: #{mat.get-color-from-palette(mat.$gray-palette, 50)};
  --app-surface-color: #{mat.get-color-from-palette(mat.$gray-palette, 800)};
  --app-border-color: #{mat.get-color-from-palette(mat.$gray-palette, 700)};
  --app-hover-background-color: #{mat.get-color-from-palette(mat.$gray-palette, 750)};
  --app-secondary-text-color: #{mat.get-color-from-palette(mat.$gray-palette, 400)};
  --app-icon-color-subtle: #{mat.get-color-from-palette(mat.$gray-palette, 500)};
  --app-disabled-color: #{mat.get-color-from-palette(mat.$gray-palette, 600)};

  // Update opacities for elevation in dark mode if needed (shadows often lighter/less opaque)
  --app-elevation-umbra-opacity: 0.14; // Example adjustment for dark
  --app-elevation-penumbra-opacity: 0.10;
  --app-elevation-ambient-opacity: 0.08;

  // Global dark theme overrides for non-Material elements or specific Material components
  background-color: var(--app-background-color);
  color: var(--app-text-color);

  app-footer .footer-toolbar {
    background-color: var(--app-surface-color);
    color: var(--app-text-color);
    border-top: 1px solid var(--app-border-color);
  }

  // Example: If mat-toolbar needs a very specific shadow in dark mode beyond what the theme provides
  // .mat-toolbar {
  //   box-shadow: 0 2px 10px rgba(0,0,0, var(--app-elevation-umbra-opacity)); // Using the CSS var
  // }

  // .mat-card {
  //   background-color: var(--app-surface-color);
  //   border: 1px solid var(--app-border-color);
  //   // box-shadow is handled by mat.elevation within its theme context
  // }
}

// REMOVE or REWORK the app-elevation function and app-custom-elevation mixin
// as they were causing issues. Rely on @include mat.elevation(Z); for Material elements.
// If you need a custom shadow for non-Material elements using CSS vars,
// define a simpler mixin like app-custom-css-var-elevation shown in previous responses,
// ensuring the $umbra-map, etc., are complete.